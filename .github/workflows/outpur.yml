name: Flutter Multi-Platform Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: subosito/flutter-action@v2
      with:
        channel: 'stable'
    - name: Install dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y ninja-build libgtk-3-dev
    - name: Enable linux build
      run: flutter config --enable-linux-desktop
    - name: Build Flutter app for Linux
      run: flutter build linux --release
    - name: Read and sanitize project name
      run: |
        PROJECT_NAME=$(grep "name:" pubspec.yaml | awk '{print $2}' | tr -d '"')
        SANITIZED_NAME=$(echo "$PROJECT_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9.-]/-/g')
        echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_ENV
        echo "SANITIZED_NAME=$SANITIZED_NAME" >> $GITHUB_ENV

    - name: Create .deb package
      run: |
        mkdir -p package/usr/bin
        mkdir -p package/usr/share/applications
        mkdir -p package/usr/share/icons/hicolor/256x256/apps

        # Copy all files including directories recursively
        cp -r build/linux/x64/release/bundle/* package/usr/bin/

        # Create the .desktop file
        echo "[Desktop Entry]" > package/usr/share/applications/${{ env.PROJECT_NAME }}.desktop
        echo "Name=${{ env.PROJECT_NAME }}" >> package/usr/share/applications/${{ env.PROJECT_NAME }}.desktop
        echo "Exec=/usr/bin/${{ env.PROJECT_NAME }}" >> package/usr/share/applications/${{ env.PROJECT_NAME }}.desktop
        echo "Icon=${{ env.PROJECT_NAME }}" >> package/usr/share/applications/${{ env.PROJECT_NAME }}.desktop
        echo "Type=Application" >> package/usr/share/applications/${{ env.PROJECT_NAME }}.desktop
        echo "Categories=Utility;" >> package/usr/share/applications/${{ env.PROJECT_NAME }}.desktop

        # Copy the icon (adjust path and size as necessary)
        cp lib/assets/Icon-192.png package/usr/share/icons/hicolor/256x256/apps/${{ env.PROJECT_NAME }}.png

        # Create DEBIAN/control file
        mkdir -p package/DEBIAN
        echo "Package: ${{ env.SANITIZED_NAME }}" > package/DEBIAN/control
        echo "Version: 1.0.${{ github.run_number }}" >> package/DEBIAN/control
        echo "Section: base" >> package/DEBIAN/control
        echo "Priority: optional" >> package/DEBIAN/control
        echo "Architecture: amd64" >> package/DEBIAN/control
        echo "Maintainer: Your Name <your.email@example.com>" >> package/DEBIAN/control
        echo "Description: ${{ env.PROJECT_NAME }}" >> package/DEBIAN/control

        dpkg-deb --build package ${{ env.SANITIZED_NAME }}-linux-release-bundle.deb

    - name: Compress release bundle
      run: |
        zip -r ${{ env.SANITIZED_NAME }}-linux-release-bundle.zip build/linux/x64/release/bundle/*

    - name: Upload Linux artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux-release
        path: |
          ${{ env.SANITIZED_NAME }}-linux-release-bundle.deb
          ${{ env.SANITIZED_NAME }}-linux-release-bundle.zip
  build-windows:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
    - name: Enable Windows desktop
      run: flutter config --enable-windows-desktop
    - name: Install dependencies
      run: flutter pub get
    - name: Build Windows app
      run: flutter build windows --release
    - name: Display build directory contents
      run: dir build\windows\x64\runner\Release
    - name: Compress release bundle
      run: |
        Compress-Archive -Path build\windows\x64\runner\Release\* -DestinationPath windows-release-bundle.zip
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-release
        path: windows-release-bundle.zip

  build-android:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
    - uses: subosito/flutter-action@v2
      with:
        channel: 'stable'
    - name: Build Flutter app for Android
      run: flutter build apk --release
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-release
        path: build/app/outputs/flutter-apk/app-release.apk

  release:
    needs: [build-linux, build-windows, build-android]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y

      - name: Read project name
        run: |
          PROJECT_NAME=$(grep "name:" pubspec.yaml | awk '{print $2}' | tr -d '"')
          SANITIZED_NAME=$(echo "$PROJECT_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9.-]/-/g')
          echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_ENV
          echo "SANITIZED_NAME=$SANITIZED_NAME" >> $GITHUB_ENV

      - name: Create version.json
        run: |
          VERSION="1.0.${{ github.run_number }}"
          echo "{" > version.json
          echo "  \"version\": \"$VERSION\"," >> version.json
          echo "  \"linux_url\": \"https://github.com/${{ github.repository }}/releases/download/v$VERSION/${{ env.SANITIZED_NAME }}-linux-release-bundle.zip\"," >> version.json
          echo "  \"linux_deb_url\": \"https://github.com/${{ github.repository }}/releases/download/v$VERSION/${{ env.SANITIZED_NAME }}-linux-release-bundle.deb\"," >> version.json
          echo "  \"windows_url\": \"https://github.com/${{ github.repository }}/releases/download/v$VERSION/windows-release-bundle.zip\"," >> version.json
          echo "  \"android_url\": \"https://github.com/${{ github.repository }}/releases/download/v$VERSION/app-release.apk\"," >> version.json
          echo "  \"release_notes\": \"Release of the build from the commit ${{ github.sha }}.\"" >> version.json
          echo "}" >> version.json

      - name: Commit and push version.json
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add version.json
          git commit -m "Update version.json for release ${{ github.run_number }}"
          git pull --rebase
          git push

      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-release

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-release

      - name: Download Android artifact
        uses: actions/download-artifact@v4
        with:
          name: android-release

      - name: List files in current directory
        run: ls -la

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v1.0.${{ github.run_number }} \
          --title "Release ${{ github.run_number }}" \
          --notes "Release of the build from the commit ${{ github.sha }}." \
          ${{ env.SANITIZED_NAME }}-linux-release-bundle.zip ${{ env.SANITIZED_NAME }}-linux-release-bundle.deb windows-release-bundle.zip app-release.apk